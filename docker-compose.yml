#environment:
#  - DATABASE_URL=mongodb://mongodb:27017/node-boilerplate

version: "3.9"
services:
  configuration-service:
    build: ./ConfigurationService
    container_name: configuration-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - '8888:8080'
    networks:
      - microservice
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health | grep UP || exit 1"
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  process-and-user-service:
    build: ./ProcessAndUserService
    container_name: process-and-user-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATA_MONGODB_URI=mongodb://mongo-db:27017/bps
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/bps
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=password
      - CONFIGURATION_SERVICE_URL=http://configuration-service:8080
    ports:
      - '8081:8080'
    depends_on:
      postgres-db:
        condition: service_healthy
      configuration-service:
        condition: service_healthy
    networks:
      - microservice

  postgres-db:
    container_name: postgres
    image: 'postgres:13.1-alpine'
    environment:
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=bps
    ports:
      - "5432:5432"
    volumes:
      - postgres-db-data:/var/lib/postgresql/data
    networks:
      - microservice
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  mongo-db:
    image: mongo:6-jammy
    container_name: mongodb-details
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_DB=bps
    ports:
      - '27017:27017'
    volumes:
      - mongo-db-data:/data/db
    networks:
      - microservice
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - microservice
    ports:
      - "22181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    networks:
      - microservice
    ports:
      - "29092:29092"

networks:
  microservice:
    driver: bridge

volumes:
  postgres-db-data:
  mongo-db-data: